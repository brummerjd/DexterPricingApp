#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class DexterPricingDatabase : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCustomer(Customer instance);
  partial void UpdateCustomer(Customer instance);
  partial void DeleteCustomer(Customer instance);
  partial void InsertMiscCharge(MiscCharge instance);
  partial void UpdateMiscCharge(MiscCharge instance);
  partial void DeleteMiscCharge(MiscCharge instance);
  partial void InsertPart(Part instance);
  partial void UpdatePart(Part instance);
  partial void DeletePart(Part instance);
  partial void InsertPartCharge(PartCharge instance);
  partial void UpdatePartCharge(PartCharge instance);
  partial void DeletePartCharge(PartCharge instance);
  #endregion
	
	public DexterPricingDatabase(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DexterPricingDatabase(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DexterPricingDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DexterPricingDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Customer> Customer
	{
		get
		{
			return this.GetTable<Customer>();
		}
	}
	
	public System.Data.Linq.Table<MiscCharge> MiscCharge
	{
		get
		{
			return this.GetTable<MiscCharge>();
		}
	}
	
	public System.Data.Linq.Table<Part> Part
	{
		get
		{
			return this.GetTable<Part>();
		}
	}
	
	public System.Data.Linq.Table<PartCharge> PartCharge
	{
		get
		{
			return this.GetTable<PartCharge>();
		}
	}
}

[Table()]
public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CustomerID;
	
	private string _Name;
	
	private string _Notes;
	
	private EntitySet<MiscCharge> _MiscCharge;
	
	private EntitySet<PartCharge> _PartCharge;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public Customer()
	{
		this._MiscCharge = new EntitySet<MiscCharge>(new Action<MiscCharge>(this.attach_MiscCharge), new Action<MiscCharge>(this.detach_MiscCharge));
		this._PartCharge = new EntitySet<PartCharge>(new Action<PartCharge>(this.attach_PartCharge), new Action<PartCharge>(this.detach_PartCharge));
		OnCreated();
	}
	
	[Column(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Notes", DbType="NVarChar(999)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[Association(Name="Customer_FK", Storage="_MiscCharge", ThisKey="CustomerID,CustomerID", OtherKey="CustomerID,CustomerID", DeleteRule="NO ACTION")]
	public EntitySet<MiscCharge> MiscCharge
	{
		get
		{
			return this._MiscCharge;
		}
		set
		{
			this._MiscCharge.Assign(value);
		}
	}
	
	[Association(Name="Customer_FK", Storage="_PartCharge", ThisKey="CustomerID,CustomerID", OtherKey="CustomerID,CustomerID", DeleteRule="NO ACTION")]
	public EntitySet<PartCharge> PartCharge
	{
		get
		{
			return this._PartCharge;
		}
		set
		{
			this._PartCharge.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MiscCharge(MiscCharge entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_MiscCharge(MiscCharge entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
	
	private void attach_PartCharge(PartCharge entity)
	{
		this.SendPropertyChanging();
		entity.Customer = this;
	}
	
	private void detach_PartCharge(PartCharge entity)
	{
		this.SendPropertyChanging();
		entity.Customer = null;
	}
}

[Table()]
public partial class MiscCharge : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _MiscChargeKey;
	
	private int _CustomerID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Description;
	
	private double _Amount;
	
	private System.Nullable<System.DateTime> _Printed;
	
	private bool _IsTaxable;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMiscChargeKeyChanging(int value);
    partial void OnMiscChargeKeyChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    partial void OnPrintedChanging(System.Nullable<System.DateTime> value);
    partial void OnPrintedChanged();
    partial void OnIsTaxableChanging(bool value);
    partial void OnIsTaxableChanged();
    #endregion
	
	public MiscCharge()
	{
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[Column(Storage="_MiscChargeKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int MiscChargeKey
	{
		get
		{
			return this._MiscChargeKey;
		}
		set
		{
			if ((this._MiscChargeKey != value))
			{
				this.OnMiscChargeKeyChanging(value);
				this.SendPropertyChanging();
				this._MiscChargeKey = value;
				this.SendPropertyChanged("MiscChargeKey");
				this.OnMiscChargeKeyChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(999)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Amount", DbType="Float NOT NULL")]
	public double Amount
	{
		get
		{
			return this._Amount;
		}
		set
		{
			if ((this._Amount != value))
			{
				this.OnAmountChanging(value);
				this.SendPropertyChanging();
				this._Amount = value;
				this.SendPropertyChanged("Amount");
				this.OnAmountChanged();
			}
		}
	}
	
	[Column(Storage="_Printed", DbType="DateTime")]
	public System.Nullable<System.DateTime> Printed
	{
		get
		{
			return this._Printed;
		}
		set
		{
			if ((this._Printed != value))
			{
				this.OnPrintedChanging(value);
				this.SendPropertyChanging();
				this._Printed = value;
				this.SendPropertyChanged("Printed");
				this.OnPrintedChanged();
			}
		}
	}
	
	[Column(Storage="_IsTaxable", DbType="Bit NOT NULL")]
	public bool IsTaxable
	{
		get
		{
			return this._IsTaxable;
		}
		set
		{
			if ((this._IsTaxable != value))
			{
				this.OnIsTaxableChanging(value);
				this.SendPropertyChanging();
				this._IsTaxable = value;
				this.SendPropertyChanged("IsTaxable");
				this.OnIsTaxableChanged();
			}
		}
	}
	
	[Association(Name="Customer_FK", Storage="_Customer", ThisKey="CustomerID,CustomerID", OtherKey="CustomerID,CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.MiscCharge.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.MiscCharge.Add(this);
					this._CustomerID = value.CustomerID;
					this._CustomerID = value.CustomerID;
				}
				else
				{
					this._CustomerID = default(int);
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PartKey;
	
	private string _Code;
	
	private string _Description;
	
	private double _Price;
	
	private bool _IsCustom;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartKeyChanging(int value);
    partial void OnPartKeyChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnIsCustomChanging(bool value);
    partial void OnIsCustomChanged();
    #endregion
	
	public Part()
	{
		OnCreated();
	}
	
	[Column(Storage="_PartKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PartKey
	{
		get
		{
			return this._PartKey;
		}
		set
		{
			if ((this._PartKey != value))
			{
				this.OnPartKeyChanging(value);
				this.SendPropertyChanging();
				this._PartKey = value;
				this.SendPropertyChanged("PartKey");
				this.OnPartKeyChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(100)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_IsCustom", DbType="Bit NOT NULL")]
	public bool IsCustom
	{
		get
		{
			return this._IsCustom;
		}
		set
		{
			if ((this._IsCustom != value))
			{
				this.OnIsCustomChanging(value);
				this.SendPropertyChanging();
				this._IsCustom = value;
				this.SendPropertyChanged("IsCustom");
				this.OnIsCustomChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class PartCharge : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PartChargeKey;
	
	private string _Code;
	
	private string _Description;
	
	private int _Quantity;
	
	private double _Price;
	
	private int _CustomerID;
	
	private System.Nullable<System.DateTime> _Printed;
	
	private bool _IsTaxable;
	
	private EntityRef<Customer> _Customer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartChargeKeyChanging(int value);
    partial void OnPartChargeKeyChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnPrintedChanging(System.Nullable<System.DateTime> value);
    partial void OnPrintedChanged();
    partial void OnIsTaxableChanging(bool value);
    partial void OnIsTaxableChanged();
    #endregion
	
	public PartCharge()
	{
		this._Customer = default(EntityRef<Customer>);
		OnCreated();
	}
	
	[Column(Storage="_PartChargeKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PartChargeKey
	{
		get
		{
			return this._PartChargeKey;
		}
		set
		{
			if ((this._PartChargeKey != value))
			{
				this.OnPartChargeKeyChanging(value);
				this.SendPropertyChanging();
				this._PartChargeKey = value;
				this.SendPropertyChanged("PartChargeKey");
				this.OnPartChargeKeyChanged();
			}
		}
	}
	
	[Column(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Code
	{
		get
		{
			return this._Code;
		}
		set
		{
			if ((this._Code != value))
			{
				this.OnCodeChanging(value);
				this.SendPropertyChanging();
				this._Code = value;
				this.SendPropertyChanged("Code");
				this.OnCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="NVarChar(100)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
	public int CustomerID
	{
		get
		{
			return this._CustomerID;
		}
		set
		{
			if ((this._CustomerID != value))
			{
				if (this._Customer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCustomerIDChanging(value);
				this.SendPropertyChanging();
				this._CustomerID = value;
				this.SendPropertyChanged("CustomerID");
				this.OnCustomerIDChanged();
			}
		}
	}
	
	[Column(Storage="_Printed", DbType="DateTime")]
	public System.Nullable<System.DateTime> Printed
	{
		get
		{
			return this._Printed;
		}
		set
		{
			if ((this._Printed != value))
			{
				this.OnPrintedChanging(value);
				this.SendPropertyChanging();
				this._Printed = value;
				this.SendPropertyChanged("Printed");
				this.OnPrintedChanged();
			}
		}
	}
	
	[Column(Storage="_IsTaxable", DbType="Bit NOT NULL")]
	public bool IsTaxable
	{
		get
		{
			return this._IsTaxable;
		}
		set
		{
			if ((this._IsTaxable != value))
			{
				this.OnIsTaxableChanging(value);
				this.SendPropertyChanging();
				this._IsTaxable = value;
				this.SendPropertyChanged("IsTaxable");
				this.OnIsTaxableChanged();
			}
		}
	}
	
	[Association(Name="Customer_FK", Storage="_Customer", ThisKey="CustomerID,CustomerID", OtherKey="CustomerID,CustomerID", IsForeignKey=true)]
	public Customer Customer
	{
		get
		{
			return this._Customer.Entity;
		}
		set
		{
			Customer previousValue = this._Customer.Entity;
			if (((previousValue != value) 
						|| (this._Customer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Customer.Entity = null;
					previousValue.PartCharge.Remove(this);
				}
				this._Customer.Entity = value;
				if ((value != null))
				{
					value.PartCharge.Add(this);
					this._CustomerID = value.CustomerID;
					this._CustomerID = value.CustomerID;
				}
				else
				{
					this._CustomerID = default(int);
					this._CustomerID = default(int);
				}
				this.SendPropertyChanged("Customer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
